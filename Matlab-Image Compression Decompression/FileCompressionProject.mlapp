classdef FileCompressionProject < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        ImageCompressionDecompressionUIFigure  matlab.ui.Figure
        FileMenu                       matlab.ui.container.Menu
        CompressionMenu                matlab.ui.container.Menu
        DecompressionMenu              matlab.ui.container.Menu
        ExitMenu                       matlab.ui.container.Menu
        VideoMenu                      matlab.ui.container.Menu
        CompressionMenu_2              matlab.ui.container.Menu
        DecompressionMenu_2            matlab.ui.container.Menu
        ExitMenu_2                     matlab.ui.container.Menu
        SelectFileButton               matlab.ui.control.Button
        UIAxes                         matlab.ui.control.UIAxes
        CompressionRatioLabel          matlab.ui.control.Label
        CompressionRatioEditField      matlab.ui.control.EditField
        LblSelectFile                  matlab.ui.control.Label
        CompressFileButton             matlab.ui.control.Button
        DecompressFileButton           matlab.ui.control.Button
        UIAxes2                        matlab.ui.control.UIAxes
        CompressionSizeEditFieldLabel  matlab.ui.control.Label
        CompressionSizeEditField       matlab.ui.control.EditField
        OriginalSizeEditFieldLabel     matlab.ui.control.Label
        OriginalSizeEditField          matlab.ui.control.EditField
        ClearAllButton                 matlab.ui.control.Button
        MatrixSizeDropDownLabel        matlab.ui.control.Label
        MatrixSizeDropDown             matlab.ui.control.DropDown
        CoefficientValueDropDownLabel  matlab.ui.control.Label
        CoefficientValueDropDown       matlab.ui.control.DropDown
        FilenameLabel                  matlab.ui.control.Label
        UnCompressedSizeLabel          matlab.ui.control.Label
        UnCompressedSizeEditField      matlab.ui.control.EditField
    end
    
    methods (Access = private)
    
        % Menu selected function: CompressionMenu
        function CompressionMenuSelected(app, event)
            app.LblSelectFile.Visible=true;
            app.LblSelectFile.Enable=true;
            app.SelectFileButton.Enable=true;
            %print('Enter file for compression');
        end
        
        % Button pushed function: SelectFileButton
        function SelectFileButtonPushed(app, event)
            global fname;
            UIAxes.Title.string='Input Image';
            UIAxes2.Title.string='Output Image';
            [filename pathname]=uigetfile({'*.png'},'File Selector');
            fname=fullfile(pathname,filename);
            imshow(fname,'Parent',app.UIAxes);
            msgbox ('done1');    
            app.DecompressFileButton.Enable = true;
            app.CompressFileButton.Enable=true;
            app.LblSelectFile.Text=fname;
            app.LblSelectFile.Visible=false;
            app.FilenameLabel.Text=filename;
            app.FilenameLabel.Visible=false;
            
        end

        % Callback function: CompressFileButton, 
        % CompressionSizeEditField
        function CompressFileButtonPushed(app, event)
            app.LblSelectFile.Visible=false;
            app.CompressionRatioEditField.Enable=true;
            UnCompressedSizeEditField.Visble=false;
            fname=app.LblSelectFile.Text;
            filename = app.FilenameLabel.Text;
            msgbox('done');
            mat_size=app.MatrixSizeDropDown.Value
            coeff_val=app.CoefficientValueDropDown.Value
            i_blocksize = str2double(mat_size);
            i_coeff = str2double(coeff_val);
            msgbox('done2');
            im = imread(fname);
            outpath = strcat('C:\Users\nirup\Desktop\Shalini Study Reading University\Image processing\2018_ImageCompression\Demo\Compressed_',string(i_coeff),'_',filename);
            T = dctmtx(i_blocksize);
            
            % defining co-efficients for block size 8[5]
            if i_blocksize == 8
                if i_coeff == 1
                    mask = [1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif i_coeff == 4 % defining co-efficients for block size 4
                    mask = [1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 8
                    mask = [1   1   1   1   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 10
                    mask = [1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 12
                    mask = [1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 16
                    mask = [1   1   1   1   1   1   0   0
                            1   1   1   1   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 20
                    mask = [1   1   1   1   1   1   0   0
                            1   1   1   1   0   0   0   0
                            1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 24
                    mask = [1   1   1   1   1   1   1   1
                            1   1   1   1   1   1   0   0
                            1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 24
                    mask = [1   1   1   1   1   1   1   1
                            1   1   1   1   1   1   0   0
                            1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                end
            elseif i_blocksize == 4
                if i_coeff == 1
                   mask =  [1   0   0   0 
                            0   0   0   0 
                            0   0   0   0 
                            0   0   0   0 ];
                elseif i_coeff == 4
                   mask =  [1   1   0   0 
                            1   0   0   0 
                            1   0   0   0 
                            0   0   0   0 ];
                elseif  i_coeff == 8
                    mask = [1   1   1   1 
                            1   1   0   0 
                            1   0   0   0 
                            1   0   0   0 ];
                elseif  i_coeff == 10
                    mask = [1   1   1   1
                            1   1   1   0
                            1   1   0   0
                            1   0   0   0];
                elseif  i_coeff == 12
                    mask = [1   1   1   1
                            1   1   1   0
                            1   1   1   0
                            1   1   0   0];
                end        
            end
            
            if (size(im,3)>1)    
        
                % get individual planes [5]
                R_im = im2double(im(:,:,1));
                G_im = im2double(im(:,:,2));
                B_im = im2double(im(:,:,3));
        
                % matrix of 8X8 [5]
                dct = @(block_struct) T * block_struct.data * T';
        
                % divide image in 8x* block and applying DCT
                R = blockproc(R_im,[i_blocksize i_blocksize],dct);
                B = blockproc(B_im,[i_blocksize i_blocksize],dct);
                G = blockproc(G_im,[i_blocksize i_blocksize],dct);
                
                % Applying mask[5]
                R_mask = blockproc(R,[i_blocksize i_blocksize],@(block_struct) mask .* block_struct.data );
                G_mask = blockproc(G,[i_blocksize i_blocksize],@(block_struct) mask .* block_struct.data );
                B_mask = blockproc(B,[i_blocksize i_blocksize],@(block_struct) mask .* block_struct.data );
                
                % inverse DCT[5]
                funinvdct = @(block_struct) T' * block_struct.data * T;
                R_image = blockproc(R_mask,[i_blocksize i_blocksize],funinvdct);
                B_image = blockproc(G_mask,[i_blocksize i_blocksize],funinvdct);
                G_image = blockproc(B_mask,[i_blocksize i_blocksize],funinvdct);
                
                % cat
                comp_image(:,:,:)=cat(3,R_image, B_image, G_image);
           else
                % get individual planes
                R_im = im2double(im);
                
                % DCT
                dct = @(block_struct) T * block_struct.data * T';
        
                % divide image in 8x* block and applying DCT
                R = blockproc(R_im,[i_blocksize i_blocksize],dct);
                
                R_mask = blockproc(R,[i_blocksize i_blocksize],@(block_struct) mask .* block_struct.data );
                % inverse
                funinvdct = @(block_struct) T' * block_struct.data * T;
                % divide image in 4x4 block and applying DCT
                comp_image = blockproc(R_mask,[i_blocksize i_blocksize],funinvdct);
            end
            
            % write file
            app.LblSelectFile.Text = outpath;
            imwrite(comp_image,outpath);
            imshow(comp_image,'Parent',app.UIAxes2);
            
            %  input file size   
            fileinfo = dir(fname);
            SIZE = fileinfo.bytes;
            imSize = SIZE/1024;
            
            %  output file size 
            fileinfo = dir(string(outpath));
            SIZE = fileinfo.bytes;
            outSize = SIZE/1024;
              
            % Compression Ratio & PSNR 
            [peaksnr, snr] = psnr(double(imread(outpath)), double(im));
            compressionratio = (outSize/imSize)* 100;
            compressionratio_per = 100 - ((outSize/imSize)* 100);
            app.CompressionRatioEditField.Value = string(compressionratio_per);
            app.CompressionSizeEditField.Value = string(outSize);
            app.OriginalSizeEditField.Value = string(imSize);

        end
        
        % Button pushed function: DecompressFileButton
        function DecompressFileButtonPushed(app, event)
            app.LblSelectFile.Visible=false;
            app.CompressionRatioEditField.Enable=false;
            fname=app.LblSelectFile.Text;            
            filename = app.FilenameLabel.Text;
            msgbox('done');
            mat_size=app.MatrixSizeDropDown.Value
            coeff_val=app.CoefficientValueDropDown.Value
            i_blocksize = str2double(mat_size);
            i_coeff = str2double(coeff_val);
            msgbox('done2');
            im = imread(fname);
            outpath = strcat('C:\Users\nirup\Desktop\Shalini Study Reading University\Image processing\2018_ImageCompression\Demo\Decompressed_',string(i_coeff),'_',filename);
            T = dctmtx(i_blocksize);
            if i_blocksize == 8
                if i_coeff == 1
                    mask = [1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif i_coeff == 4
                    mask = [1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 8
                    mask = [1   1   1   1   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 10
                    mask = [1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 12
                    mask = [1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 16
                    mask = [1   1   1   1   1   1   0   0
                            1   1   1   1   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 20
                    mask = [1   1   1   1   1   1   0   0
                            1   1   1   1   0   0   0   0
                            1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 24
                    mask = [1   1   1   1   1   1   1   1
                            1   1   1   1   1   1   0   0
                            1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                elseif  i_coeff == 24
                    mask = [1   1   1   1   1   1   1   1
                            1   1   1   1   1   1   0   0
                            1   1   1   1   0   0   0   0
                            1   1   1   0   0   0   0   0
                            1   1   0   0   0   0   0   0
                            1   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0
                            0   0   0   0   0   0   0   0];
                end
            elseif i_blocksize == 4
                if i_coeff == 1
                   mask =  [1   0   0   0 
                            0   0   0   0 
                            0   0   0   0 
                            0   0   0   0 ];
                elseif i_coeff == 4
                   mask =  [1   1   0   0 
                            1   0   0   0 
                            1   0   0   0 
                            0   0   0   0 ];
                elseif  i_coeff == 8
                    mask = [1   1   1   1 
                            1   1   0   0 
                            1   0   0   0 
                            1   0   0   0 ];
                elseif  i_coeff == 10
                    mask = [1   1   1   1
                            1   1   1   0
                            1   1   0   0
                            1   0   0   0];
                elseif  i_coeff == 12
                    mask = [1   1   1   1
                            1   1   1   0
                            1   1   1   0
                            1   1   0   0];
                end        
            end
            
            if (size(im,3)>1)    
        
                % get individual planes
                R_im = im2double(im(:,:,1));
                G_im = im2double(im(:,:,2));
                B_im = im2double(im(:,:,3));
        
                % matrix of 8X8
                dct = @(block_struct) T' * block_struct.data * T;
        
                % divide image in 8x* block and applying DCT
                R = blockproc(R_im,[i_blocksize i_blocksize],dct);
                B = blockproc(B_im,[i_blocksize i_blocksize],dct);
                G = blockproc(G_im,[i_blocksize i_blocksize],dct);
                
                % Applying mask
                R_mask = blockproc(R,[i_blocksize i_blocksize],@(block_struct) mask .* block_struct.data );
                G_mask = blockproc(G,[i_blocksize i_blocksize],@(block_struct) mask .* block_struct.data );
                B_mask = blockproc(B,[i_blocksize i_blocksize],@(block_struct) mask .* block_struct.data );
                
                % inverse DCT
                funinvdct = @(block_struct) T * block_struct.data * T';
                R_image = blockproc(R_mask,[i_blocksize i_blocksize],funinvdct);
                B_image = blockproc(G_mask,[i_blocksize i_blocksize],funinvdct);
                G_image = blockproc(B_mask,[i_blocksize i_blocksize],funinvdct);
                
                % cat
                comp_image(:,:,:)=cat(3,R_image, B_image, G_image);
            
            end

              
        end

         % Menu selected function: CompressionMenu_2
        function CompressionMenu_2Selected(app, event)
            app.OriginalSizeEditField.Enable=true;
            app.OriginalSizeEditField.Visible=true;
            app.CompressionRatioEditField.Enable=true;
            app.CompressionRatioEditField.visible=true;
            app.UnCompressedSizeEditField.Enable=false;
            app.UnCompressedSizeEditField.Visible=true;
        end
        % Menu selected function: DecompressionMenu
        function DecompressionMenuSelected(app, event)
            app.OriginalSizeEditField.Enable=false;
            app.CompressionRatioEditField.Enable=false;
            app.CompressFileButton.Enable = false;
            app.SelectFileButton.Enable=true;
        end
        % Button pushed function: ClearAllButton
        function ClearAllButtonPushed(app, event)
            app.UIAxes.cla;
            app.UIAxes.reset;
            app.UIAxes2.cla;
            app.UIAxes2.reset;
            app.CompressionRatioEditField.Value="";
            app.OriginalSizeEditField.Value="";
            app.CompressionSizeEditField.Value="";
            app.LblSelectFile.Text="";
                    
        end
        % Menu selected function: DecompressionMenu_2
        function DecompressionMenu_2Selected(app, event)
            app.OriginalSizeEditField.Enable=false;
            app.CompressionRatioEditField.Enable=false;
            app.UnCompressedSizeEditField.Enable=true;
            app.UnCompressedSizeEditField.Visible=true;
        end
    end

    
    % App initialization and construction
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create ImageCompressionDecompressionUIFigure
            app.ImageCompressionDecompressionUIFigure = uifigure;
            app.ImageCompressionDecompressionUIFigure.Position = [100 100 801 540];
            app.ImageCompressionDecompressionUIFigure.Name = 'Image Compression/Decompression';
            
            % Create FileMenu
            app.FileMenu = uimenu(app.ImageCompressionDecompressionUIFigure);
            app.FileMenu.ForegroundColor = [1 0.4118 0.1608];
            app.FileMenu.Text = 'File';
            
            % Create CompressionMenu
            app.CompressionMenu = uimenu(app.FileMenu);
            app.CompressionMenu.MenuSelectedFcn = createCallbackFcn(app, @CompressionMenuSelected, true);
            app.CompressionMenu.Tooltip = {'Open file for compression'};
            app.CompressionMenu.ForegroundColor = [0.6392 0.0784 0.1804];
            app.CompressionMenu.Text = 'Compression';

            % Create DecompressionMenu
            app.DecompressionMenu = uimenu(app.FileMenu);
            app.DecompressionMenu.ForegroundColor = [0.6392 0.0784 0.1804];
            app.DecompressionMenu.Text = 'Decompression';
            
             % Create ExitMenu
            app.ExitMenu = uimenu(app.FileMenu);
            app.ExitMenu.ForegroundColor = [0.6392 0.0784 0.1804];
            app.ExitMenu.Text = 'Exit';
            
            % Create VideoMenu
            app.VideoMenu = uimenu(app.ImageCompressionDecompressionUIFigure);
            app.VideoMenu.ForegroundColor = [1 0.4118 0.1608];
            app.VideoMenu.Text = 'Video';
            
             % Create CompressionMenu_2
            app.CompressionMenu_2 = uimenu(app.VideoMenu);
            app.CompressionMenu_2.ForegroundColor = [0.6392 0.0784 0.1804];
            app.CompressionMenu_2.Text = 'Compression';
            
            % Create DecompressionMenu_2
            app.DecompressionMenu_2 = uimenu(app.VideoMenu);
            app.DecompressionMenu_2.ForegroundColor = [0.6392 0.0784 0.1804];
            app.DecompressionMenu_2.Text = 'Decompression';
            
            % Create ExitMenu_2
            app.ExitMenu_2 = uimenu(app.VideoMenu);
            app.ExitMenu_2.ForegroundColor = [0.6392 0.0784 0.1804];
            app.ExitMenu_2.Text = 'Exit';
            
             % Create SelectFileButton
            app.SelectFileButton = uibutton(app.ImageCompressionDecompressionUIFigure, 'push');
            app.SelectFileButton.ButtonPushedFcn = createCallbackFcn(app, @SelectFileButtonPushed, true);
            app.SelectFileButton.FontColor = [0.6392 0.0784 0.1804];
            app.SelectFileButton.Enable = 'off';
            app.SelectFileButton.Position = [85 177 100 22];
            app.SelectFileButton.Text = 'Select File';
            
             % Create UIAxes
            app.UIAxes = uiaxes(app.ImageCompressionDecompressionUIFigure);
            title(app.UIAxes, 'Input Image')
            xlabel(app.UIAxes, 'X')
            ylabel(app.UIAxes, 'Y')
            app.UIAxes.PlotBoxAspectRatio = [1 0.677083333333333 0.677083333333333];
            app.UIAxes.Position = [49 207 357 284];
            
            % Create CompressionRatioEditFieldLabel
            app.CompressionRatioEditFieldLabel = uilabel(app.ImageCompressionDecompressionUIFigure);
            app.CompressionRatioEditFieldLabel.HorizontalAlignment = 'right';
            app.CompressionRatioEditFieldLabel.Position = [485 108 107 22];
            app.CompressionRatioEditFieldLabel.Text = 'Compression Ratio';
            
            % Create CompressionRatioEditField
            app.CompressionRatioEditField = uieditfield(app.ImageCompressionDecompressionUIFigure, 'text');
            app.CompressionRatioEditField.Position = [607 108 105 22];
            
             % Create LblSelectFile
            app.LblSelectFile = uilabel(app.ImageCompressionDecompressionUIFigure);
            app.LblSelectFile.FontWeight = 'bold';
            app.LblSelectFile.Enable = 'off';
            app.LblSelectFile.Visible = 'off';
            app.LblSelectFile.Position = [174 519 135 22];
            app.LblSelectFile.Text = 'Select file';
            
            % Create CompressFileButton
            app.CompressFileButton = uibutton(app.ImageCompressionDecompressionUIFigure, 'push');
            app.CompressFileButton.ButtonPushedFcn = createCallbackFcn(app, @CompressFileButtonPushed, true);
            app.CompressFileButton.FontColor = [0.6392 0.0784 0.1804];
            app.CompressFileButton.Enable = 'off';
            app.CompressFileButton.Tooltip = {'Click to compress file'};
            app.CompressFileButton.Position = [211 177 100 22];
            app.CompressFileButton.Text = 'Compress File';
            
            % Create DecompressFileButton
            app.DecompressFileButton = uibutton(app.ImageCompressionDecompressionUIFigure, 'push');
            app.DecompressFileButton.FontColor = [0.6392 0.0784 0.1804];
            app.DecompressFileButton.Enable = 'off';
            app.DecompressFileButton.Tooltip = {'Click to decompress file'};
            app.DecompressFileButton.Position = [336 177 106 22];
            app.DecompressFileButton.Text = 'Decompress File';
            
             % Create UIAxes2
            app.UIAxes2 = uiaxes(app.ImageCompressionDecompressionUIFigure);
            title(app.UIAxes2, 'Output  Image')
            xlabel(app.UIAxes2, 'X')
            ylabel(app.UIAxes2, 'Y')
            app.UIAxes2.PlotBoxAspectRatio = [1 0.691292875989446 0.691292875989446];
            app.UIAxes2.Position = [405 219 351 265];
            
             % Create CompressionSizeEditFieldLabel
            app.CompressionSizeEditFieldLabel = uilabel(app.ImageCompressionDecompressionUIFigure);
            app.CompressionSizeEditFieldLabel.HorizontalAlignment = 'right';
            app.CompressionSizeEditFieldLabel.Position = [479 142 103 22];
            app.CompressionSizeEditFieldLabel.Text = 'Compression Size';
            
             % Create CompressionSizeEditField
            app.CompressionSizeEditField = uieditfield(app.ImageCompressionDecompressionUIFigure, 'text');
            app.CompressionSizeEditField.Position = [597 142 115 22];

            % Create ClearAllButton
            app.ClearAllButton = uibutton(app.ImageCompressionDecompressionUIFigure, 'state');
            app.ClearAllButton.Text = {'Clear All'; ''};
            app.ClearAllButton.FontColor = [0.6392 0.0784 0.1804];
            app.ClearAllButton.Position = [85 142 100 22];
            
            % Create OriginalSizeEditFieldLabel
            app.OriginalSizeEditFieldLabel = uilabel(app.ImageCompressionDecompressionUIFigure);
            app.OriginalSizeEditFieldLabel.HorizontalAlignment = 'right';
            app.OriginalSizeEditFieldLabel.Position = [479 177 74 22];
            app.OriginalSizeEditFieldLabel.Text = 'Original Size';

            % Create OriginalSizeEditField
            app.OriginalSizeEditField = uieditfield(app.ImageCompressionDecompressionUIFigure, 'text');
            app.OriginalSizeEditField.Position = [568 177 144 22];
        end
        
    end

methods (Access = public)

        % Construct app
        function app = FileCompressionProject

            % Create and configure components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.ImageCompressionDecompressionUIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.ImageCompressionDecompressionUIFigure)
        end
    end
end
